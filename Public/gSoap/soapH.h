/* soapH.h
   Generated by gSOAP 2.8.32 for add.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_ns__syndwsaTicketInfo_DEFINED
#define SOAP_TYPE_ns__syndwsaTicketInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__syndwsaTicketInfo(struct soap*, struct ns__syndwsaTicketInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__syndwsaTicketInfo(struct soap*, const struct ns__syndwsaTicketInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__syndwsaTicketInfo(struct soap*, const char*, int, const struct ns__syndwsaTicketInfo *, const char*);
SOAP_FMAC3 struct ns__syndwsaTicketInfo * SOAP_FMAC4 soap_in_ns__syndwsaTicketInfo(struct soap*, const char*, struct ns__syndwsaTicketInfo *, const char*);
SOAP_FMAC1 struct ns__syndwsaTicketInfo * SOAP_FMAC2 soap_instantiate_ns__syndwsaTicketInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__syndwsaTicketInfo * soap_new_ns__syndwsaTicketInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__syndwsaTicketInfo(soap, n, NULL, NULL, NULL);
}

inline struct ns__syndwsaTicketInfo * soap_new_req_ns__syndwsaTicketInfo(
	struct soap *soap,
	const struct SyndwsaTicketInfoRequest& request)
{
	struct ns__syndwsaTicketInfo *_p = soap_new_ns__syndwsaTicketInfo(soap);
	if (_p)
	{	soap_default_ns__syndwsaTicketInfo(soap, _p);
		_p->request = request;
	}
	return _p;
}

inline struct ns__syndwsaTicketInfo * soap_new_set_ns__syndwsaTicketInfo(
	struct soap *soap,
	const struct SyndwsaTicketInfoRequest& request)
{
	struct ns__syndwsaTicketInfo *_p = soap_new_ns__syndwsaTicketInfo(soap);
	if (_p)
	{	soap_default_ns__syndwsaTicketInfo(soap, _p);
		_p->request = request;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__syndwsaTicketInfo(struct soap*, const struct ns__syndwsaTicketInfo *, const char*, const char*);

inline int soap_write_ns__syndwsaTicketInfo(struct soap *soap, struct ns__syndwsaTicketInfo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__syndwsaTicketInfo(soap, p), 0) || soap_put_ns__syndwsaTicketInfo(soap, p, "ns:syndwsaTicketInfo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__syndwsaTicketInfo * SOAP_FMAC4 soap_get_ns__syndwsaTicketInfo(struct soap*, struct ns__syndwsaTicketInfo *, const char*, const char*);

inline int soap_read_ns__syndwsaTicketInfo(struct soap *soap, struct ns__syndwsaTicketInfo *p)
{
	if (p)
	{	soap_default_ns__syndwsaTicketInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__syndwsaTicketInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__syndwsaTicketInfoResponse_DEFINED
#define SOAP_TYPE_ns__syndwsaTicketInfoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__syndwsaTicketInfoResponse(struct soap*, struct ns__syndwsaTicketInfoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__syndwsaTicketInfoResponse(struct soap*, const struct ns__syndwsaTicketInfoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__syndwsaTicketInfoResponse(struct soap*, const char*, int, const struct ns__syndwsaTicketInfoResponse *, const char*);
SOAP_FMAC3 struct ns__syndwsaTicketInfoResponse * SOAP_FMAC4 soap_in_ns__syndwsaTicketInfoResponse(struct soap*, const char*, struct ns__syndwsaTicketInfoResponse *, const char*);
SOAP_FMAC1 struct ns__syndwsaTicketInfoResponse * SOAP_FMAC2 soap_instantiate_ns__syndwsaTicketInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__syndwsaTicketInfoResponse * soap_new_ns__syndwsaTicketInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__syndwsaTicketInfoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__syndwsaTicketInfoResponse * soap_new_req_ns__syndwsaTicketInfoResponse(
	struct soap *soap)
{
	struct ns__syndwsaTicketInfoResponse *_p = soap_new_ns__syndwsaTicketInfoResponse(soap);
	if (_p)
	{	soap_default_ns__syndwsaTicketInfoResponse(soap, _p);
	}
	return _p;
}

inline struct ns__syndwsaTicketInfoResponse * soap_new_set_ns__syndwsaTicketInfoResponse(
	struct soap *soap,
	struct SyndwsaTicketInfoResponse *serviceResponse)
{
	struct ns__syndwsaTicketInfoResponse *_p = soap_new_ns__syndwsaTicketInfoResponse(soap);
	if (_p)
	{	soap_default_ns__syndwsaTicketInfoResponse(soap, _p);
		_p->serviceResponse = serviceResponse;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__syndwsaTicketInfoResponse(struct soap*, const struct ns__syndwsaTicketInfoResponse *, const char*, const char*);

inline int soap_write_ns__syndwsaTicketInfoResponse(struct soap *soap, struct ns__syndwsaTicketInfoResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__syndwsaTicketInfoResponse(soap, p), 0) || soap_put_ns__syndwsaTicketInfoResponse(soap, p, "ns:syndwsaTicketInfoResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__syndwsaTicketInfoResponse * SOAP_FMAC4 soap_get_ns__syndwsaTicketInfoResponse(struct soap*, struct ns__syndwsaTicketInfoResponse *, const char*, const char*);

inline int soap_read_ns__syndwsaTicketInfoResponse(struct soap *soap, struct ns__syndwsaTicketInfoResponse *p)
{
	if (p)
	{	soap_default_ns__syndwsaTicketInfoResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__syndwsaTicketInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SyndwsaTicketInfoResponse_DEFINED
#define SOAP_TYPE_SyndwsaTicketInfoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SyndwsaTicketInfoResponse(struct soap*, struct SyndwsaTicketInfoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SyndwsaTicketInfoResponse(struct soap*, const struct SyndwsaTicketInfoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SyndwsaTicketInfoResponse(struct soap*, const char*, int, const struct SyndwsaTicketInfoResponse *, const char*);
SOAP_FMAC3 struct SyndwsaTicketInfoResponse * SOAP_FMAC4 soap_in_SyndwsaTicketInfoResponse(struct soap*, const char*, struct SyndwsaTicketInfoResponse *, const char*);
SOAP_FMAC1 struct SyndwsaTicketInfoResponse * SOAP_FMAC2 soap_instantiate_SyndwsaTicketInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SyndwsaTicketInfoResponse * soap_new_SyndwsaTicketInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SyndwsaTicketInfoResponse(soap, n, NULL, NULL, NULL);
}

inline struct SyndwsaTicketInfoResponse * soap_new_req_SyndwsaTicketInfoResponse(
	struct soap *soap,
	const std::string& responseVersion,
	const std::string& requestCtxUUID,
	const std::string& responseCode,
	const std::string& responseExtCode,
	const std::string& responseMessage)
{
	struct SyndwsaTicketInfoResponse *_p = soap_new_SyndwsaTicketInfoResponse(soap);
	if (_p)
	{	soap_default_SyndwsaTicketInfoResponse(soap, _p);
		_p->responseVersion = responseVersion;
		_p->requestCtxUUID = requestCtxUUID;
		_p->responseCode = responseCode;
		_p->responseExtCode = responseExtCode;
		_p->responseMessage = responseMessage;
	}
	return _p;
}

inline struct SyndwsaTicketInfoResponse * soap_new_set_SyndwsaTicketInfoResponse(
	struct soap *soap,
	const std::string& responseVersion,
	const std::string& requestCtxUUID,
	const std::string& responseCode,
	const std::string& responseExtCode,
	const std::string& responseMessage)
{
	struct SyndwsaTicketInfoResponse *_p = soap_new_SyndwsaTicketInfoResponse(soap);
	if (_p)
	{	soap_default_SyndwsaTicketInfoResponse(soap, _p);
		_p->responseVersion = responseVersion;
		_p->requestCtxUUID = requestCtxUUID;
		_p->responseCode = responseCode;
		_p->responseExtCode = responseExtCode;
		_p->responseMessage = responseMessage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SyndwsaTicketInfoResponse(struct soap*, const struct SyndwsaTicketInfoResponse *, const char*, const char*);

inline int soap_write_SyndwsaTicketInfoResponse(struct soap *soap, struct SyndwsaTicketInfoResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SyndwsaTicketInfoResponse(soap, p), 0) || soap_put_SyndwsaTicketInfoResponse(soap, p, "SyndwsaTicketInfoResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SyndwsaTicketInfoResponse * SOAP_FMAC4 soap_get_SyndwsaTicketInfoResponse(struct soap*, struct SyndwsaTicketInfoResponse *, const char*, const char*);

inline int soap_read_SyndwsaTicketInfoResponse(struct soap *soap, struct SyndwsaTicketInfoResponse *p)
{
	if (p)
	{	soap_default_SyndwsaTicketInfoResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_SyndwsaTicketInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SyndwsaTicketInfoRequest_DEFINED
#define SOAP_TYPE_SyndwsaTicketInfoRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SyndwsaTicketInfoRequest(struct soap*, struct SyndwsaTicketInfoRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SyndwsaTicketInfoRequest(struct soap*, const struct SyndwsaTicketInfoRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SyndwsaTicketInfoRequest(struct soap*, const char*, int, const struct SyndwsaTicketInfoRequest *, const char*);
SOAP_FMAC3 struct SyndwsaTicketInfoRequest * SOAP_FMAC4 soap_in_SyndwsaTicketInfoRequest(struct soap*, const char*, struct SyndwsaTicketInfoRequest *, const char*);
SOAP_FMAC1 struct SyndwsaTicketInfoRequest * SOAP_FMAC2 soap_instantiate_SyndwsaTicketInfoRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct SyndwsaTicketInfoRequest * soap_new_SyndwsaTicketInfoRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_SyndwsaTicketInfoRequest(soap, n, NULL, NULL, NULL);
}

inline struct SyndwsaTicketInfoRequest * soap_new_req_SyndwsaTicketInfoRequest(
	struct soap *soap,
	const std::string& wtCode,
	const std::string& wtPlanStartTime,
	const std::string& wtPlanEndTime)
{
	struct SyndwsaTicketInfoRequest *_p = soap_new_SyndwsaTicketInfoRequest(soap);
	if (_p)
	{	soap_default_SyndwsaTicketInfoRequest(soap, _p);
		_p->wtCode = wtCode;
		_p->wtPlanStartTime = wtPlanStartTime;
		_p->wtPlanEndTime = wtPlanEndTime;
	}
	return _p;
}

inline struct SyndwsaTicketInfoRequest * soap_new_set_SyndwsaTicketInfoRequest(
	struct soap *soap,
	const std::string& wtCode,
	const std::string& wtPlanStartTime,
	const std::string& wtPlanEndTime,
	const std::vector<struct PropInfoPojo> & lstPropInfo,
	const std::vector<struct TermInfoPojo> & lstTermInfo)
{
	struct SyndwsaTicketInfoRequest *_p = soap_new_SyndwsaTicketInfoRequest(soap);
	if (_p)
	{	soap_default_SyndwsaTicketInfoRequest(soap, _p);
		_p->wtCode = wtCode;
		_p->wtPlanStartTime = wtPlanStartTime;
		_p->wtPlanEndTime = wtPlanEndTime;
		_p->lstPropInfo = lstPropInfo;
		_p->lstTermInfo = lstTermInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SyndwsaTicketInfoRequest(struct soap*, const struct SyndwsaTicketInfoRequest *, const char*, const char*);

inline int soap_write_SyndwsaTicketInfoRequest(struct soap *soap, struct SyndwsaTicketInfoRequest const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SyndwsaTicketInfoRequest(soap, p), 0) || soap_put_SyndwsaTicketInfoRequest(soap, p, "SyndwsaTicketInfoRequest", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SyndwsaTicketInfoRequest * SOAP_FMAC4 soap_get_SyndwsaTicketInfoRequest(struct soap*, struct SyndwsaTicketInfoRequest *, const char*, const char*);

inline int soap_read_SyndwsaTicketInfoRequest(struct soap *soap, struct SyndwsaTicketInfoRequest *p)
{
	if (p)
	{	soap_default_SyndwsaTicketInfoRequest(soap, p);
		if (soap_begin_recv(soap) || soap_get_SyndwsaTicketInfoRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__Syndwsadata_DEFINED
#define SOAP_TYPE_ns__Syndwsadata_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Syndwsadata(struct soap*, struct ns__Syndwsadata *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Syndwsadata(struct soap*, const struct ns__Syndwsadata *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Syndwsadata(struct soap*, const char*, int, const struct ns__Syndwsadata *, const char*);
SOAP_FMAC3 struct ns__Syndwsadata * SOAP_FMAC4 soap_in_ns__Syndwsadata(struct soap*, const char*, struct ns__Syndwsadata *, const char*);
SOAP_FMAC1 struct ns__Syndwsadata * SOAP_FMAC2 soap_instantiate_ns__Syndwsadata(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__Syndwsadata * soap_new_ns__Syndwsadata(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__Syndwsadata(soap, n, NULL, NULL, NULL);
}

inline struct ns__Syndwsadata * soap_new_req_ns__Syndwsadata(
	struct soap *soap,
	const struct SyndwsadataRequest& request)
{
	struct ns__Syndwsadata *_p = soap_new_ns__Syndwsadata(soap);
	if (_p)
	{	soap_default_ns__Syndwsadata(soap, _p);
		_p->request = request;
	}
	return _p;
}

inline struct ns__Syndwsadata * soap_new_set_ns__Syndwsadata(
	struct soap *soap,
	const struct SyndwsadataRequest& request)
{
	struct ns__Syndwsadata *_p = soap_new_ns__Syndwsadata(soap);
	if (_p)
	{	soap_default_ns__Syndwsadata(soap, _p);
		_p->request = request;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Syndwsadata(struct soap*, const struct ns__Syndwsadata *, const char*, const char*);

inline int soap_write_ns__Syndwsadata(struct soap *soap, struct ns__Syndwsadata const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__Syndwsadata(soap, p), 0) || soap_put_ns__Syndwsadata(soap, p, "ns:Syndwsadata", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__Syndwsadata * SOAP_FMAC4 soap_get_ns__Syndwsadata(struct soap*, struct ns__Syndwsadata *, const char*, const char*);

inline int soap_read_ns__Syndwsadata(struct soap *soap, struct ns__Syndwsadata *p)
{
	if (p)
	{	soap_default_ns__Syndwsadata(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__Syndwsadata(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SyndwsadataResponse_DEFINED
#define SOAP_TYPE_ns__SyndwsadataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SyndwsadataResponse(struct soap*, struct ns__SyndwsadataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SyndwsadataResponse(struct soap*, const struct ns__SyndwsadataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SyndwsadataResponse(struct soap*, const char*, int, const struct ns__SyndwsadataResponse *, const char*);
SOAP_FMAC3 struct ns__SyndwsadataResponse * SOAP_FMAC4 soap_in_ns__SyndwsadataResponse(struct soap*, const char*, struct ns__SyndwsadataResponse *, const char*);
SOAP_FMAC1 struct ns__SyndwsadataResponse * SOAP_FMAC2 soap_instantiate_ns__SyndwsadataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SyndwsadataResponse * soap_new_ns__SyndwsadataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__SyndwsadataResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__SyndwsadataResponse * soap_new_req_ns__SyndwsadataResponse(
	struct soap *soap)
{
	struct ns__SyndwsadataResponse *_p = soap_new_ns__SyndwsadataResponse(soap);
	if (_p)
	{	soap_default_ns__SyndwsadataResponse(soap, _p);
	}
	return _p;
}

inline struct ns__SyndwsadataResponse * soap_new_set_ns__SyndwsadataResponse(
	struct soap *soap,
	struct SyndwsadataResponse *serviceResponse)
{
	struct ns__SyndwsadataResponse *_p = soap_new_ns__SyndwsadataResponse(soap);
	if (_p)
	{	soap_default_ns__SyndwsadataResponse(soap, _p);
		_p->serviceResponse = serviceResponse;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SyndwsadataResponse(struct soap*, const struct ns__SyndwsadataResponse *, const char*, const char*);

inline int soap_write_ns__SyndwsadataResponse(struct soap *soap, struct ns__SyndwsadataResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__SyndwsadataResponse(soap, p), 0) || soap_put_ns__SyndwsadataResponse(soap, p, "ns:SyndwsadataResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SyndwsadataResponse * SOAP_FMAC4 soap_get_ns__SyndwsadataResponse(struct soap*, struct ns__SyndwsadataResponse *, const char*, const char*);

inline int soap_read_ns__SyndwsadataResponse(struct soap *soap, struct ns__SyndwsadataResponse *p)
{
	if (p)
	{	soap_default_ns__SyndwsadataResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SyndwsadataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SyndwsadataRequest_DEFINED
#define SOAP_TYPE_SyndwsadataRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SyndwsadataRequest(struct soap*, struct SyndwsadataRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SyndwsadataRequest(struct soap*, const struct SyndwsadataRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SyndwsadataRequest(struct soap*, const char*, int, const struct SyndwsadataRequest *, const char*);
SOAP_FMAC3 struct SyndwsadataRequest * SOAP_FMAC4 soap_in_SyndwsadataRequest(struct soap*, const char*, struct SyndwsadataRequest *, const char*);
SOAP_FMAC1 struct SyndwsadataRequest * SOAP_FMAC2 soap_instantiate_SyndwsadataRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct SyndwsadataRequest * soap_new_SyndwsadataRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_SyndwsadataRequest(soap, n, NULL, NULL, NULL);
}

inline struct SyndwsadataRequest * soap_new_req_SyndwsadataRequest(
	struct soap *soap,
	const std::string& requestVersion,
	const std::string& requestCtxUUID,
	const std::string& requestUserCode,
	const std::string& requestUserPwd,
	const std::string& requestUserName,
	const std::string& requestAppCls,
	const std::string& requestAppInst)
{
	struct SyndwsadataRequest *_p = soap_new_SyndwsadataRequest(soap);
	if (_p)
	{	soap_default_SyndwsadataRequest(soap, _p);
		_p->requestVersion = requestVersion;
		_p->requestCtxUUID = requestCtxUUID;
		_p->requestUserCode = requestUserCode;
		_p->requestUserPwd = requestUserPwd;
		_p->requestUserName = requestUserName;
		_p->requestAppCls = requestAppCls;
		_p->requestAppInst = requestAppInst;
	}
	return _p;
}

inline struct SyndwsadataRequest * soap_new_set_SyndwsadataRequest(
	struct soap *soap,
	const std::string& requestVersion,
	const std::string& requestCtxUUID,
	const std::string& requestUserCode,
	const std::string& requestUserPwd,
	const std::string& requestUserName,
	const std::string& requestAppCls,
	const std::string& requestAppInst)
{
	struct SyndwsadataRequest *_p = soap_new_SyndwsadataRequest(soap);
	if (_p)
	{	soap_default_SyndwsadataRequest(soap, _p);
		_p->requestVersion = requestVersion;
		_p->requestCtxUUID = requestCtxUUID;
		_p->requestUserCode = requestUserCode;
		_p->requestUserPwd = requestUserPwd;
		_p->requestUserName = requestUserName;
		_p->requestAppCls = requestAppCls;
		_p->requestAppInst = requestAppInst;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SyndwsadataRequest(struct soap*, const struct SyndwsadataRequest *, const char*, const char*);

inline int soap_write_SyndwsadataRequest(struct soap *soap, struct SyndwsadataRequest const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SyndwsadataRequest(soap, p), 0) || soap_put_SyndwsadataRequest(soap, p, "SyndwsadataRequest", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SyndwsadataRequest * SOAP_FMAC4 soap_get_SyndwsadataRequest(struct soap*, struct SyndwsadataRequest *, const char*, const char*);

inline int soap_read_SyndwsadataRequest(struct soap *soap, struct SyndwsadataRequest *p)
{
	if (p)
	{	soap_default_SyndwsadataRequest(soap, p);
		if (soap_begin_recv(soap) || soap_get_SyndwsadataRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SyndwsadataResponse_DEFINED
#define SOAP_TYPE_SyndwsadataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SyndwsadataResponse(struct soap*, struct SyndwsadataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SyndwsadataResponse(struct soap*, const struct SyndwsadataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SyndwsadataResponse(struct soap*, const char*, int, const struct SyndwsadataResponse *, const char*);
SOAP_FMAC3 struct SyndwsadataResponse * SOAP_FMAC4 soap_in_SyndwsadataResponse(struct soap*, const char*, struct SyndwsadataResponse *, const char*);
SOAP_FMAC1 struct SyndwsadataResponse * SOAP_FMAC2 soap_instantiate_SyndwsadataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SyndwsadataResponse * soap_new_SyndwsadataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SyndwsadataResponse(soap, n, NULL, NULL, NULL);
}

inline struct SyndwsadataResponse * soap_new_req_SyndwsadataResponse(
	struct soap *soap,
	const std::string& responseVersion,
	const std::string& requestCtxUUID,
	const std::string& responseCode,
	const std::string& responseExtCode,
	const std::string& responseMessage)
{
	struct SyndwsadataResponse *_p = soap_new_SyndwsadataResponse(soap);
	if (_p)
	{	soap_default_SyndwsadataResponse(soap, _p);
		_p->responseVersion = responseVersion;
		_p->requestCtxUUID = requestCtxUUID;
		_p->responseCode = responseCode;
		_p->responseExtCode = responseExtCode;
		_p->responseMessage = responseMessage;
	}
	return _p;
}

inline struct SyndwsadataResponse * soap_new_set_SyndwsadataResponse(
	struct soap *soap,
	const std::string& responseVersion,
	const std::string& requestCtxUUID,
	const std::string& responseCode,
	const std::string& responseExtCode,
	const std::string& responseMessage,
	const std::vector<struct PropInfoPojo> & lstPropInfo,
	const std::vector<struct TermInfoPojo> & lstTermInfo)
{
	struct SyndwsadataResponse *_p = soap_new_SyndwsadataResponse(soap);
	if (_p)
	{	soap_default_SyndwsadataResponse(soap, _p);
		_p->responseVersion = responseVersion;
		_p->requestCtxUUID = requestCtxUUID;
		_p->responseCode = responseCode;
		_p->responseExtCode = responseExtCode;
		_p->responseMessage = responseMessage;
		_p->lstPropInfo = lstPropInfo;
		_p->lstTermInfo = lstTermInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SyndwsadataResponse(struct soap*, const struct SyndwsadataResponse *, const char*, const char*);

inline int soap_write_SyndwsadataResponse(struct soap *soap, struct SyndwsadataResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SyndwsadataResponse(soap, p), 0) || soap_put_SyndwsadataResponse(soap, p, "SyndwsadataResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SyndwsadataResponse * SOAP_FMAC4 soap_get_SyndwsadataResponse(struct soap*, struct SyndwsadataResponse *, const char*, const char*);

inline int soap_read_SyndwsadataResponse(struct soap *soap, struct SyndwsadataResponse *p)
{
	if (p)
	{	soap_default_SyndwsadataResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_SyndwsadataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_TermInfoPojo_DEFINED
#define SOAP_TYPE_TermInfoPojo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_TermInfoPojo(struct soap*, struct TermInfoPojo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_TermInfoPojo(struct soap*, const struct TermInfoPojo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_TermInfoPojo(struct soap*, const char*, int, const struct TermInfoPojo *, const char*);
SOAP_FMAC3 struct TermInfoPojo * SOAP_FMAC4 soap_in_TermInfoPojo(struct soap*, const char*, struct TermInfoPojo *, const char*);
SOAP_FMAC1 struct TermInfoPojo * SOAP_FMAC2 soap_instantiate_TermInfoPojo(struct soap*, int, const char*, const char*, size_t*);

inline struct TermInfoPojo * soap_new_TermInfoPojo(struct soap *soap, int n = -1)
{
	return soap_instantiate_TermInfoPojo(soap, n, NULL, NULL, NULL);
}

inline struct TermInfoPojo * soap_new_req_TermInfoPojo(
	struct soap *soap,
	const std::string& termId,
	const std::string& termName,
	const std::string& termIp,
	const std::string& propId)
{
	struct TermInfoPojo *_p = soap_new_TermInfoPojo(soap);
	if (_p)
	{	soap_default_TermInfoPojo(soap, _p);
		_p->termId = termId;
		_p->termName = termName;
		_p->termIp = termIp;
		_p->propId = propId;
	}
	return _p;
}

inline struct TermInfoPojo * soap_new_set_TermInfoPojo(
	struct soap *soap,
	const std::string& termId,
	const std::string& termName,
	const std::string& termIp,
	const std::string& propId)
{
	struct TermInfoPojo *_p = soap_new_TermInfoPojo(soap);
	if (_p)
	{	soap_default_TermInfoPojo(soap, _p);
		_p->termId = termId;
		_p->termName = termName;
		_p->termIp = termIp;
		_p->propId = propId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_TermInfoPojo(struct soap*, const struct TermInfoPojo *, const char*, const char*);

inline int soap_write_TermInfoPojo(struct soap *soap, struct TermInfoPojo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_TermInfoPojo(soap, p), 0) || soap_put_TermInfoPojo(soap, p, "TermInfoPojo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct TermInfoPojo * SOAP_FMAC4 soap_get_TermInfoPojo(struct soap*, struct TermInfoPojo *, const char*, const char*);

inline int soap_read_TermInfoPojo(struct soap *soap, struct TermInfoPojo *p)
{
	if (p)
	{	soap_default_TermInfoPojo(soap, p);
		if (soap_begin_recv(soap) || soap_get_TermInfoPojo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_PropInfoPojo_DEFINED
#define SOAP_TYPE_PropInfoPojo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_PropInfoPojo(struct soap*, struct PropInfoPojo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PropInfoPojo(struct soap*, const struct PropInfoPojo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PropInfoPojo(struct soap*, const char*, int, const struct PropInfoPojo *, const char*);
SOAP_FMAC3 struct PropInfoPojo * SOAP_FMAC4 soap_in_PropInfoPojo(struct soap*, const char*, struct PropInfoPojo *, const char*);
SOAP_FMAC1 struct PropInfoPojo * SOAP_FMAC2 soap_instantiate_PropInfoPojo(struct soap*, int, const char*, const char*, size_t*);

inline struct PropInfoPojo * soap_new_PropInfoPojo(struct soap *soap, int n = -1)
{
	return soap_instantiate_PropInfoPojo(soap, n, NULL, NULL, NULL);
}

inline struct PropInfoPojo * soap_new_req_PropInfoPojo(
	struct soap *soap,
	const std::string& propId,
	const std::string& propName)
{
	struct PropInfoPojo *_p = soap_new_PropInfoPojo(soap);
	if (_p)
	{	soap_default_PropInfoPojo(soap, _p);
		_p->propId = propId;
		_p->propName = propName;
	}
	return _p;
}

inline struct PropInfoPojo * soap_new_set_PropInfoPojo(
	struct soap *soap,
	const std::string& propId,
	const std::string& propName)
{
	struct PropInfoPojo *_p = soap_new_PropInfoPojo(soap);
	if (_p)
	{	soap_default_PropInfoPojo(soap, _p);
		_p->propId = propId;
		_p->propName = propName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PropInfoPojo(struct soap*, const struct PropInfoPojo *, const char*, const char*);

inline int soap_write_PropInfoPojo(struct soap *soap, struct PropInfoPojo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_PropInfoPojo(soap, p), 0) || soap_put_PropInfoPojo(soap, p, "PropInfoPojo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct PropInfoPojo * SOAP_FMAC4 soap_get_PropInfoPojo(struct soap*, struct PropInfoPojo *, const char*, const char*);

inline int soap_read_PropInfoPojo(struct soap *soap, struct PropInfoPojo *p)
{
	if (p)
	{	soap_default_PropInfoPojo(soap, p);
		if (soap_begin_recv(soap) || soap_get_PropInfoPojo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerToSyndwsaTicketInfoResponse_DEFINED
#define SOAP_TYPE_PointerToSyndwsaTicketInfoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSyndwsaTicketInfoResponse(struct soap*, struct SyndwsaTicketInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSyndwsaTicketInfoResponse(struct soap*, const char *, int, struct SyndwsaTicketInfoResponse *const*, const char *);
SOAP_FMAC3 struct SyndwsaTicketInfoResponse ** SOAP_FMAC4 soap_in_PointerToSyndwsaTicketInfoResponse(struct soap*, const char*, struct SyndwsaTicketInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSyndwsaTicketInfoResponse(struct soap*, struct SyndwsaTicketInfoResponse *const*, const char*, const char*);
SOAP_FMAC3 struct SyndwsaTicketInfoResponse ** SOAP_FMAC4 soap_get_PointerToSyndwsaTicketInfoResponse(struct soap*, struct SyndwsaTicketInfoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToSyndwsadataResponse_DEFINED
#define SOAP_TYPE_PointerToSyndwsadataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSyndwsadataResponse(struct soap*, struct SyndwsadataResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSyndwsadataResponse(struct soap*, const char *, int, struct SyndwsadataResponse *const*, const char *);
SOAP_FMAC3 struct SyndwsadataResponse ** SOAP_FMAC4 soap_in_PointerToSyndwsadataResponse(struct soap*, const char*, struct SyndwsadataResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSyndwsadataResponse(struct soap*, struct SyndwsadataResponse *const*, const char*, const char*);
SOAP_FMAC3 struct SyndwsadataResponse ** SOAP_FMAC4 soap_get_PointerToSyndwsadataResponse(struct soap*, struct SyndwsadataResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfTermInfoPojo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfTermInfoPojo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfTermInfoPojo(struct soap*, std::vector<struct TermInfoPojo> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfTermInfoPojo(struct soap*, const std::vector<struct TermInfoPojo> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfTermInfoPojo(struct soap*, const char*, int, const std::vector<struct TermInfoPojo> *, const char*);
SOAP_FMAC3 std::vector<struct TermInfoPojo> * SOAP_FMAC4 soap_in_std__vectorTemplateOfTermInfoPojo(struct soap*, const char*, std::vector<struct TermInfoPojo> *, const char*);
SOAP_FMAC1 std::vector<struct TermInfoPojo>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfTermInfoPojo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct TermInfoPojo>  * soap_new_std__vectorTemplateOfTermInfoPojo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfTermInfoPojo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPropInfoPojo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPropInfoPojo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPropInfoPojo(struct soap*, std::vector<struct PropInfoPojo> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPropInfoPojo(struct soap*, const std::vector<struct PropInfoPojo> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPropInfoPojo(struct soap*, const char*, int, const std::vector<struct PropInfoPojo> *, const char*);
SOAP_FMAC3 std::vector<struct PropInfoPojo> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPropInfoPojo(struct soap*, const char*, std::vector<struct PropInfoPojo> *, const char*);
SOAP_FMAC1 std::vector<struct PropInfoPojo>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPropInfoPojo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct PropInfoPojo>  * soap_new_std__vectorTemplateOfPropInfoPojo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPropInfoPojo(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
